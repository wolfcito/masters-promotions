schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""category for each photo"""
type category {
  emoji: String!
  id: uuid!
  image: String!
  name: String!
  slug: String!
}

"""
aggregated selection of "category"
"""
type category_aggregate {
  aggregate: category_aggregate_fields
  nodes: [category!]!
}

"""
aggregate fields of "category"
"""
type category_aggregate_fields {
  count(columns: [category_select_column!], distinct: Boolean): Int!
  max: category_max_fields
  min: category_min_fields
}

"""
Boolean expression to filter rows from the table "category". All fields are combined with a logical 'AND'.
"""
input category_bool_exp {
  _and: [category_bool_exp!]
  _not: category_bool_exp
  _or: [category_bool_exp!]
  emoji: String_comparison_exp
  id: uuid_comparison_exp
  image: String_comparison_exp
  name: String_comparison_exp
  slug: String_comparison_exp
}

"""
unique or primary key constraints on table "category"
"""
enum category_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  category_pkey
}

"""
input type for inserting data into table "category"
"""
input category_insert_input {
  emoji: String
  id: uuid
  image: String
  name: String
  slug: String
}

"""aggregate max on columns"""
type category_max_fields {
  emoji: String
  id: uuid
  image: String
  name: String
  slug: String
}

"""aggregate min on columns"""
type category_min_fields {
  emoji: String
  id: uuid
  image: String
  name: String
  slug: String
}

"""
response of any mutation on the table "category"
"""
type category_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [category!]!
}

"""
input type for inserting object relation for remote table "category"
"""
input category_obj_rel_insert_input {
  data: category_insert_input!

  """upsert condition"""
  on_conflict: category_on_conflict
}

"""
on_conflict condition type for table "category"
"""
input category_on_conflict {
  constraint: category_constraint!
  update_columns: [category_update_column!]! = []
  where: category_bool_exp
}

"""Ordering options when selecting data from "category"."""
input category_order_by {
  emoji: order_by
  id: order_by
  image: order_by
  name: order_by
  slug: order_by
}

"""primary key columns input for table: category"""
input category_pk_columns_input {
  id: uuid!
}

"""
select columns of table "category"
"""
enum category_select_column {
  """column name"""
  emoji

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  slug
}

"""
input type for updating data in table "category"
"""
input category_set_input {
  emoji: String
  id: uuid
  image: String
  name: String
  slug: String
}

"""
Streaming cursor of the table "category"
"""
input category_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: category_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input category_stream_cursor_value_input {
  emoji: String
  id: uuid
  image: String
  name: String
  slug: String
}

"""
update columns of table "category"
"""
enum category_update_column {
  """column name"""
  emoji

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  slug
}

input category_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: category_set_input

  """filter the rows which have to be updated"""
  where: category_bool_exp!
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "category"
  """
  delete_category(
    """filter the rows which have to be deleted"""
    where: category_bool_exp!
  ): category_mutation_response

  """
  delete single row from the table: "category"
  """
  delete_category_by_pk(id: uuid!): category

  """
  delete data from the table: "photos"
  """
  delete_photos(
    """filter the rows which have to be deleted"""
    where: photos_bool_exp!
  ): photos_mutation_response

  """
  delete single row from the table: "photos"
  """
  delete_photos_by_pk(id: uuid!): photos

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(id: uuid!): user

  """
  insert data into the table: "category"
  """
  insert_category(
    """the rows to be inserted"""
    objects: [category_insert_input!]!

    """upsert condition"""
    on_conflict: category_on_conflict
  ): category_mutation_response

  """
  insert a single row into the table: "category"
  """
  insert_category_one(
    """the row to be inserted"""
    object: category_insert_input!

    """upsert condition"""
    on_conflict: category_on_conflict
  ): category

  """
  insert data into the table: "photos"
  """
  insert_photos(
    """the rows to be inserted"""
    objects: [photos_insert_input!]!

    """upsert condition"""
    on_conflict: photos_on_conflict
  ): photos_mutation_response

  """
  insert a single row into the table: "photos"
  """
  insert_photos_one(
    """the row to be inserted"""
    object: photos_insert_input!

    """upsert condition"""
    on_conflict: photos_on_conflict
  ): photos

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user

  """
  update data of the table: "category"
  """
  update_category(
    """sets the columns of the filtered rows to the given values"""
    _set: category_set_input

    """filter the rows which have to be updated"""
    where: category_bool_exp!
  ): category_mutation_response

  """
  update single row of the table: "category"
  """
  update_category_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: category_set_input
    pk_columns: category_pk_columns_input!
  ): category

  """
  update multiples rows of table: "category"
  """
  update_category_many(
    """updates to execute, in order"""
    updates: [category_updates!]!
  ): [category_mutation_response]

  """
  update data of the table: "photos"
  """
  update_photos(
    """increments the numeric columns with given value of the filtered values"""
    _inc: photos_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: photos_set_input

    """filter the rows which have to be updated"""
    where: photos_bool_exp!
  ): photos_mutation_response

  """
  update single row of the table: "photos"
  """
  update_photos_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: photos_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: photos_set_input
    pk_columns: photos_pk_columns_input!
  ): photos

  """
  update multiples rows of table: "photos"
  """
  update_photos_many(
    """updates to execute, in order"""
    updates: [photos_updates!]!
  ): [photos_mutation_response]

  """
  update data of the table: "user"
  """
  update_user(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user

  """
  update multiples rows of table: "user"
  """
  update_user_many(
    """updates to execute, in order"""
    updates: [user_updates!]!
  ): [user_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""principal images for news feed"""
type photos {
  """An object relationship"""
  category: category!
  category_id: uuid!
  id: uuid!
  image: String!
  liked: Boolean!
  likes: Int!

  """An object relationship"""
  user: user!
  user_id: uuid!
}

"""
aggregated selection of "photos"
"""
type photos_aggregate {
  aggregate: photos_aggregate_fields
  nodes: [photos!]!
}

"""
aggregate fields of "photos"
"""
type photos_aggregate_fields {
  avg: photos_avg_fields
  count(columns: [photos_select_column!], distinct: Boolean): Int!
  max: photos_max_fields
  min: photos_min_fields
  stddev: photos_stddev_fields
  stddev_pop: photos_stddev_pop_fields
  stddev_samp: photos_stddev_samp_fields
  sum: photos_sum_fields
  var_pop: photos_var_pop_fields
  var_samp: photos_var_samp_fields
  variance: photos_variance_fields
}

"""aggregate avg on columns"""
type photos_avg_fields {
  likes: Float
}

"""
Boolean expression to filter rows from the table "photos". All fields are combined with a logical 'AND'.
"""
input photos_bool_exp {
  _and: [photos_bool_exp!]
  _not: photos_bool_exp
  _or: [photos_bool_exp!]
  category: category_bool_exp
  category_id: uuid_comparison_exp
  id: uuid_comparison_exp
  image: String_comparison_exp
  liked: Boolean_comparison_exp
  likes: Int_comparison_exp
  user: user_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "photos"
"""
enum photos_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  photos_pkey
}

"""
input type for incrementing numeric columns in table "photos"
"""
input photos_inc_input {
  likes: Int
}

"""
input type for inserting data into table "photos"
"""
input photos_insert_input {
  category: category_obj_rel_insert_input
  category_id: uuid
  id: uuid
  image: String
  liked: Boolean
  likes: Int
  user: user_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type photos_max_fields {
  category_id: uuid
  id: uuid
  image: String
  likes: Int
  user_id: uuid
}

"""aggregate min on columns"""
type photos_min_fields {
  category_id: uuid
  id: uuid
  image: String
  likes: Int
  user_id: uuid
}

"""
response of any mutation on the table "photos"
"""
type photos_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [photos!]!
}

"""
on_conflict condition type for table "photos"
"""
input photos_on_conflict {
  constraint: photos_constraint!
  update_columns: [photos_update_column!]! = []
  where: photos_bool_exp
}

"""Ordering options when selecting data from "photos"."""
input photos_order_by {
  category: category_order_by
  category_id: order_by
  id: order_by
  image: order_by
  liked: order_by
  likes: order_by
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: photos"""
input photos_pk_columns_input {
  id: uuid!
}

"""
select columns of table "photos"
"""
enum photos_select_column {
  """column name"""
  category_id

  """column name"""
  id

  """column name"""
  image

  """column name"""
  liked

  """column name"""
  likes

  """column name"""
  user_id
}

"""
input type for updating data in table "photos"
"""
input photos_set_input {
  category_id: uuid
  id: uuid
  image: String
  liked: Boolean
  likes: Int
  user_id: uuid
}

"""aggregate stddev on columns"""
type photos_stddev_fields {
  likes: Float
}

"""aggregate stddev_pop on columns"""
type photos_stddev_pop_fields {
  likes: Float
}

"""aggregate stddev_samp on columns"""
type photos_stddev_samp_fields {
  likes: Float
}

"""
Streaming cursor of the table "photos"
"""
input photos_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: photos_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input photos_stream_cursor_value_input {
  category_id: uuid
  id: uuid
  image: String
  liked: Boolean
  likes: Int
  user_id: uuid
}

"""aggregate sum on columns"""
type photos_sum_fields {
  likes: Int
}

"""
update columns of table "photos"
"""
enum photos_update_column {
  """column name"""
  category_id

  """column name"""
  id

  """column name"""
  image

  """column name"""
  liked

  """column name"""
  likes

  """column name"""
  user_id
}

input photos_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: photos_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: photos_set_input

  """filter the rows which have to be updated"""
  where: photos_bool_exp!
}

"""aggregate var_pop on columns"""
type photos_var_pop_fields {
  likes: Float
}

"""aggregate var_samp on columns"""
type photos_var_samp_fields {
  likes: Float
}

"""aggregate variance on columns"""
type photos_variance_fields {
  likes: Float
}

type query_root {
  """
  fetch data from the table: "category"
  """
  category(
    """distinct select on columns"""
    distinct_on: [category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_order_by!]

    """filter the rows returned"""
    where: category_bool_exp
  ): [category!]!

  """
  fetch aggregated fields from the table: "category"
  """
  category_aggregate(
    """distinct select on columns"""
    distinct_on: [category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_order_by!]

    """filter the rows returned"""
    where: category_bool_exp
  ): category_aggregate!

  """fetch data from the table: "category" using primary key columns"""
  category_by_pk(id: uuid!): category

  """
  fetch data from the table: "photos"
  """
  photos(
    """distinct select on columns"""
    distinct_on: [photos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [photos_order_by!]

    """filter the rows returned"""
    where: photos_bool_exp
  ): [photos!]!

  """
  fetch aggregated fields from the table: "photos"
  """
  photos_aggregate(
    """distinct select on columns"""
    distinct_on: [photos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [photos_order_by!]

    """filter the rows returned"""
    where: photos_bool_exp
  ): photos_aggregate!

  """fetch data from the table: "photos" using primary key columns"""
  photos_by_pk(id: uuid!): photos

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: uuid!): user
}

type subscription_root {
  """
  fetch data from the table: "category"
  """
  category(
    """distinct select on columns"""
    distinct_on: [category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_order_by!]

    """filter the rows returned"""
    where: category_bool_exp
  ): [category!]!

  """
  fetch aggregated fields from the table: "category"
  """
  category_aggregate(
    """distinct select on columns"""
    distinct_on: [category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_order_by!]

    """filter the rows returned"""
    where: category_bool_exp
  ): category_aggregate!

  """fetch data from the table: "category" using primary key columns"""
  category_by_pk(id: uuid!): category

  """
  fetch data from the table in a streaming manner: "category"
  """
  category_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [category_stream_cursor_input]!

    """filter the rows returned"""
    where: category_bool_exp
  ): [category!]!

  """
  fetch data from the table: "photos"
  """
  photos(
    """distinct select on columns"""
    distinct_on: [photos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [photos_order_by!]

    """filter the rows returned"""
    where: photos_bool_exp
  ): [photos!]!

  """
  fetch aggregated fields from the table: "photos"
  """
  photos_aggregate(
    """distinct select on columns"""
    distinct_on: [photos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [photos_order_by!]

    """filter the rows returned"""
    where: photos_bool_exp
  ): photos_aggregate!

  """fetch data from the table: "photos" using primary key columns"""
  photos_by_pk(id: uuid!): photos

  """
  fetch data from the table in a streaming manner: "photos"
  """
  photos_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [photos_stream_cursor_input]!

    """filter the rows returned"""
    where: photos_bool_exp
  ): [photos!]!

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: uuid!): user

  """
  fetch data from the table in a streaming manner: "user"
  """
  user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_stream_cursor_input]!

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!
}

"""user information"""
type user {
  id: uuid!
  image: String!
  name: String!
  nickname: String!
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  id: uuid_comparison_exp
  image: String_comparison_exp
  name: String_comparison_exp
  nickname: String_comparison_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_pkey
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  id: uuid
  image: String
  name: String
  nickname: String
}

"""aggregate max on columns"""
type user_max_fields {
  id: uuid
  image: String
  name: String
  nickname: String
}

"""aggregate min on columns"""
type user_min_fields {
  id: uuid
  image: String
  name: String
  nickname: String
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
input type for inserting object relation for remote table "user"
"""
input user_obj_rel_insert_input {
  data: user_insert_input!

  """upsert condition"""
  on_conflict: user_on_conflict
}

"""
on_conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  id: order_by
  image: order_by
  name: order_by
  nickname: order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  id: uuid!
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  nickname
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  id: uuid
  image: String
  name: String
  nickname: String
}

"""
Streaming cursor of the table "user"
"""
input user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_stream_cursor_value_input {
  id: uuid
  image: String
  name: String
  nickname: String
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  nickname
}

input user_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: user_set_input

  """filter the rows which have to be updated"""
  where: user_bool_exp!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}